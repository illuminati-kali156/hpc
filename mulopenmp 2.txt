#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 1000

int main() {
    int i, j, k, num_threads;
    double sum;
    double *A, *B, *C;
    double start_time, end_time, serial_time, parallel_time;
    
    // Allocate memory for the matrices
    A = (double*)malloc(N*N*sizeof(double));
    B = (double*)malloc(N*N*sizeof(double));
    C = (double*)malloc(N*N*sizeof(double));
    
    // Initialize matrices A and B with random values
    for (i = 0; i < N*N; i++) {
        A[i] = rand()/(double)RAND_MAX;
        B[i] = rand()/(double)RAND_MAX;
    }
    
    // Serial matrix multiplication
    start_time = omp_get_wtime();
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            sum = 0.0;
            for (k = 0; k < N; k++) {
                sum += A[i*N+k]*B[k*N+j];
            }
            C[i*N+j] = sum;
        }
    }
    end_time = omp_get_wtime();
    serial_time = end_time - start_time;
    printf("Serial execution time: %lf seconds\n", serial_time);
    
    // Parallel matrix multiplication
    for (num_threads = 1; num_threads <= 8; num_threads++) {
        omp_set_num_threads(num_threads);
        start_time = omp_get_wtime();
        #pragma omp parallel for private(j,k,sum)
        for (i = 0; i < N; i++) {
            for (j = 0; j < N; j++) {
                sum = 0.0;
                for (k = 0; k < N; k++) {
                    sum += A[i*N+k]*B[k*N+j];
                }
                C[i*N+j] = sum;
            }
        }
        end_time = omp_get_wtime();
        parallel_time = end_time - start_time;
        printf("Parallel execution time with %d threads: %lf seconds\n", num_threads, parallel_time);
    }
    
    // Free memory
    free(A);
    free(B);
    free(C);
    
    return 0;
}

//gcc -fopenmp matrix_multiply_openmp.c -o matrix_multiply
